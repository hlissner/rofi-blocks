diff --git a/include/view.h b/include/view.h
index 06ab99a8..2e22696a 100644
--- a/include/view.h
+++ b/include/view.h
@@ -319,6 +319,15 @@ void rofi_view_set_placeholder(RofiViewState *state, const char *text);
  */
 void rofi_view_clear_input(RofiViewState *state);
 
+/**
+ * @param state The handle to the view.
+ * @param text An UTF-8 encoded character array with the new input text
+ * @param cursor_pos Where to place the cursor. Clamped to text length and -1 == end
+ *
+ * Changes the contexts of the entry box, then triggers refiltering.
+ */
+void rofi_view_set_input(RofiViewState *state, const char *text, int cursor_pos);
+
 /**
  * @param menu_flags The state of the new window.
  *
diff --git a/source/view.c b/source/view.c
index e5ccc4b3..1090e2e6 100644
--- a/source/view.c
+++ b/source/view.c
@@ -1426,6 +1426,8 @@ static gboolean rofi_view_refilter_real(RofiViewState *state) {
     listview_set_filtered(state->list_view, TRUE);
     unsigned int j = 0;
     state->tokens = helper_tokenize(pattern, config.case_sensitive);
+    unsigned int old_selected_line = state->selected_line;
+    unsigned int old_selected_index = listview_get_selected(state->list_view);
     /**
      * On long lists it can be beneficial to parallelize.
      * If number of threads is 1, no thread is spawn.
@@ -1487,6 +1489,17 @@ static gboolean rofi_view_refilter_real(RofiViewState *state) {
     state->filtered_lines = j;
     g_free(pattern);
 
+    // Restore the selection, if possible.
+    if (old_selected_index < state->filtered_lines
+        && old_selected_line != state->line_map[listview_get_selected(state->list_view)]) {
+      for (unsigned int i = 0; old_selected_line < UINT32_MAX && i < state->filtered_lines; ++i) {
+        if (state->line_map[i] == old_selected_line) {
+          rofi_view_set_selected_line(state, old_selected_line);
+          break;
+        }
+      }
+    }
+
     double elapsed = g_timer_elapsed(timer, NULL);
 
     CacheState.max_refilter_time = elapsed;
@@ -2732,6 +2745,21 @@ void rofi_view_clear_input(RofiViewState *state) {
   }
 }
 
+void rofi_view_set_input(RofiViewState *state, const char *text, int cursor_pos) {
+  if (state->text) {
+    textbox_text(state->text, text == NULL ? "" : text);
+    if (text != NULL) {
+      if (cursor_pos < 0) {
+        ++cursor_pos;
+        cursor_pos = ((int)g_utf8_strlen(state->text->text, -1)) + cursor_pos;
+      }
+      textbox_cursor(state->text, cursor_pos);
+    }
+    state->refilter = TRUE;
+    rofi_view_input_changed();
+  }
+}
+
 void rofi_view_ellipsize_listview(RofiViewState *state,
                                   PangoEllipsizeMode mode) {
   listview_set_ellipsize(state->list_view, mode);
